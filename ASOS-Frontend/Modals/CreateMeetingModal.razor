@using System.Globalization;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@using System.Text
@using System.Text.Json

@inject Radzen.DialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<RadzenStack Style="gap:20px; min-width:250px; max-width:350px; margin:auto;">
    <EditForm Model="formInputModel" OnValidSubmit="ReturnCreatedMeeting">
        <FluentValidationValidator />
        <RadzenFieldset Text="Špecifikácia">
            <RadzenStack Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="1rem">
                <RadzenFormField Text="Predmet" Variant="Radzen.Variant.Outlined" AllowFloatingLabel="false">
                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                    Data=@subjects AllowClear="true" @bind-Value=formInputModel.Subject Style="width: 200px;" class="rz-shadow-5" />
                </RadzenFormField>
                <ValidationMessage For="@(() => formInputModel.Subject)" />
                <RadzenFormField Text="Dátum a čas" Variant="Radzen.Variant.Outlined" AllowFloatingLabel="false">
                    <RadzenDatePicker @bind-Value="formInputModel.CombinedDateTime" ShowCalendarWeek AllowClear ShowTime="true" DateFormat="dd.MM.yyyy HH:mm" Culture='new CultureInfo("sk-SK")' Style="width: 200px;" class="rz-shadow-5" />
                </RadzenFormField>
                <ValidationMessage For="@(() => formInputModel.CombinedDateTime)" />
                <RadzenFormField Text="Trvanie (minút)" Variant="Radzen.Variant.Outlined" AllowFloatingLabel="false">
                    <RadzenNumeric @bind-Value="formInputModel.Duration" Style="width: 200px;" class="rz-shadow-5" />
                </RadzenFormField>
                <ValidationMessage For="@(() => formInputModel.Duration)" />
            </RadzenStack>
        </RadzenFieldset>
        <RadzenRow JustifyContent="JustifyContent.Center" Gap="20px" Style="margin-top:20px;">
            <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="MudBlazor.Color.Success" Style="width: 145px;">Potvrdiť</MudButton>
            <MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="MudBlazor.Color.Error" Style="width: 145px;" @onclick='() => DialogService.Close()'>Zrušiť</MudButton>
        </RadzenRow>
    </EditForm>
</RadzenStack>

@code {
    List<string> subjects = new();
	List<CourseDto> courses = new();
    CreateMeetingInputModel formInputModel = new();

    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient("API");
        var coursesResponse = await httpClient.GetAsync("teacherCourses");
        var errorMessage = await coursesResponse.Content.ReadAsStringAsync();
        if (coursesResponse.IsSuccessStatusCode)
        {
            var coursesJson = await coursesResponse.Content.ReadAsStringAsync();
            courses = System.Text.Json.JsonSerializer.Deserialize<List<CourseDto>>(coursesJson);
            subjects = courses.Select(c => c.Name).Distinct().ToList();
        }
        else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Používateľ neexistuje.", Severity.Error);
        }
        else if (errorMessage == "Only teacher can use this endpoint: /teacherCourses.")
        {
            Snackbar.Add("Iba učiteľ môže pristupovať na tento endpoint: /teacherCourses.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri zobrazení vašich doučovaní. Skúste to znova neskôr.", Severity.Error);
        }
    }

    async void ReturnCreatedMeeting()
    {
        MeetingDto newMeeting = new MeetingDto
        {
            Beginning = (DateTime)formInputModel.CombinedDateTime!,
            Duration = (int)formInputModel.Duration!,
			Teacher = await getcurrentUser(HttpClientFactory.CreateClient("API")),
            Course = courses.Find(c => c.Name == formInputModel.Subject)
        };
        DialogService.Close(newMeeting);
    }

	async Task<UserDto?> getcurrentUser(HttpClient httpClient)
	{
		var userResponse = await httpClient.GetAsync("user");

		UserDto? currentUser = new();

		if (userResponse.IsSuccessStatusCode)
		{
			var userJson = await userResponse.Content.ReadAsStringAsync();
			currentUser = JsonSerializer.Deserialize<UserDto>(userJson);
		}

		return currentUser;
	}
}