@page "/profile"

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations;
@using FormInputModels.Account;
@using FormInputModels.ManageAccount;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<style>
	.mud-tabs-tabbar {
		border-bottom: var(--rz-fieldset-border);
	}

	.mud-tabs {
		display: flex;
		width: 100%;
		height: 100%;
	}

	.mud-tabs-panels {
		display: flex;
		height: 100%;
		overflow-y: auto;
		overflow-x: hidden;
	}

	.rz-fieldset-legend-text {
		font-weight: bold;
		font-size: medium;
	}

	@@media only screen and (max-width: 1000px) {
		#profile-page {
			height: 100%;
			border-radius: 0 !important;
		}
	}

	@@media only screen and (max-width: 590px) {
		#profile-form {
			justify-content: center !important;
		}
	}
</style>

<div style="width:100%; height:100%; display:flex; ">
	<RadzenCard id="profile-page" Variant="Radzen.Variant.Filled" class="rz-p-0 rz-shadow-3 rz-border-radius-3" Style="max-width: 1000px; min-height:690px; flex:1 1; margin:auto; overflow: auto;">
		@if (currentUser != null)
		{
			<MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-5">
				<MudTabPanel Text="Profil">
					<EditForm Model="formInputModel" OnValidSubmit="UpdateProfile" style="margin:auto; max-width:650px; flex:1">
						<DataAnnotationsValidator />
						<RadzenFieldset Text="Základné údaje">
							<RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="0.5rem">
								<RadzenRow AlignItems="Radzen.AlignItems.Center" Gap="0">
									<MudText Typo="Typo.body2">Status:</MudText>
									<MudChip T="string" Variant="MudBlazor.Variant.Text" Color="Color.Info" Icon="@Icons.Material.Filled.Person">@currentUser.Role</MudChip>
								</RadzenRow>
								<RadzenRow id="profile-form">
									<RadzenStack Style="width:48%; min-width:250px" Gap="0.2rem">
										<MudTextField Label="Titul" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="formInputModel.Degree" For="@(() => formInputModel.Degree)" Style="width:125px;" />
										<MudTextField Label="Meno" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="formInputModel.FirstName" For="@(() => formInputModel.FirstName)" Style="width:250px;" />
										<MudTextField Label="Priezvisko" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="formInputModel.LastName" For="@(() => formInputModel.LastName)" Style="width:250px;" />
										<MudTextField Label="Tel.číslo" Variant="MudBlazor.Variant.Outlined" ShrinkLabel Mask="@(new PatternMask("+000 000 000 000"))" @bind-Value="formInputModel.PhoneNumber" For="@(() => formInputModel.PhoneNumber)" Style="width:250px;" />
									</RadzenStack>
									<RadzenStack Style="width:48%;min-width:250px" JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0.75rem">
										<RadzenImage Style="height: 250px;" Path="/profile_picture.jpg" />
										<RadzenRow JustifyContent="JustifyContent.Center" Gap="0.6rem">
											<MudFileUpload T="IBrowserFile" FilesChanged="(e) => UploadProfilePicture(e)" Accept=".jpg, .png" Style="width:fit-content; border-radius:20px; ">
												<ActivatorContent>
													<MudFab Color="Color.Info" Class="mud-button-outlined mud-button-outlined-info mud-button-outlined-size-medium mud-ripple rz-shadow-0" StartIcon="@Icons.Material.Filled.Edit" Label="Zmeniť" Style="width: 125px; height:38px; background-color: white;" />
												</ActivatorContent>
											</MudFileUpload>
											<MudButton Variant="MudBlazor.Variant.Outlined" StartIcon="@Icons.Material.Filled.Delete" Color="MudBlazor.Color.Info" Style="width: 125px; border-radius:20px;" @onclick="async() => await DeleteProfilePicture()">Odstrániť</MudButton>
										</RadzenRow>
									</RadzenStack>
								</RadzenRow>
								<MudTextField Label="Popis" Variant="MudBlazor.Variant.Outlined" ShrinkLabel Lines="4" @bind-Value="formInputModel.Description" For="@(() => formInputModel.Description)" Style="width:100%;" />
							</RadzenStack>
						</RadzenFieldset>
						<RadzenRow class="rz-mt-5" JustifyContent="JustifyContent.Center" Gap="1rem">
							<MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Success" Style="width: 200px;">Uložiť zmeny</MudButton>
							<AuthorizeView Policy="StudentOnly">
								<Authorized Context="none">
									<MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.GroupAdd" Color="MudBlazor.Color.Info" @onclick="async() => await RequestTeacherRole()" Style="width: 200px;">Žiadosť o učenie</MudButton>
								</Authorized>
							</AuthorizeView>
						</RadzenRow>
					</EditForm>
				</MudTabPanel>


				<MudTabPanel Text="Email">
					<EditForm Model="emailChangeInputModel" OnValidSubmit="UpdateEmail" style="margin:auto; max-width:325px; min-width:250px; flex:1">
						<DataAnnotationsValidator />
						<RadzenFieldset Text="Zmena emailu">
							<RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="0.5rem">
								<MudTextField Label="Email" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="emailChangeInputModel.Email" For="@(() => emailChangeInputModel.Email)" />
								<MudTextField Label="Nový email" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="emailChangeInputModel.NewEmail" For="@(() => emailChangeInputModel.NewEmail)" />
								<MudTextField Label="Heslo" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="emailChangeInputModel.Password" For="@(() => emailChangeInputModel.Password)" InputType="InputType.Password" />
							</RadzenStack>
						</RadzenFieldset>
						<RadzenRow class="rz-mt-5">
							<MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Success" Style="width: 200px; margin:auto">Uložiť zmeny</MudButton>
						</RadzenRow>
					</EditForm>
				</MudTabPanel>


				<MudTabPanel Text="Heslo">
					<EditForm Model="passwordChangeInputModel" OnValidSubmit="UpdatePassword" style="margin:auto; max-width:340px">
						<DataAnnotationsValidator />
						<RadzenFieldset Text="Zmena hesla">
							<RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="0.5rem">
								<MudTextField Label="Heslo" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="passwordChangeInputModel.Password" For="@(() => passwordChangeInputModel.Password)" InputType="InputType.Password" />
								<MudTextField Label="Nové heslo" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="passwordChangeInputModel.NewPassword" For="@(() => passwordChangeInputModel.NewPassword)" InputType="InputType.Password" />
								<MudTextField Label="Potvrdenie hesla" Variant="MudBlazor.Variant.Outlined" ShrinkLabel @bind-Value="passwordChangeInputModel.ConfirmNewPassword" For="@(() => passwordChangeInputModel.ConfirmNewPassword)" InputType="InputType.Password" />
							</RadzenStack>
						</RadzenFieldset>
						<RadzenRow class="rz-mt-5">
							<MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Success" Style="width: 200px; margin:auto">Uložiť zmeny</MudButton>
						</RadzenRow>
					</EditForm>
				</MudTabPanel>
			</MudTabs>
		}
	</RadzenCard>
</div>

@code {
	UserDto? currentUser;
	ProfileInputModel formInputModel;
	EmailChangeInputModel emailChangeInputModel;
	PasswordChangeInputModel passwordChangeInputModel;

	protected override async Task OnInitializedAsync()
	{
		var httpClient = HttpClientFactory.CreateClient("API");

		var userResponse = await httpClient.GetAsync("user");

		if (userResponse.IsSuccessStatusCode)
		{
			var userJson = await userResponse.Content.ReadAsStringAsync();

			currentUser = JsonSerializer.Deserialize<UserDto>(userJson);

			formInputModel = new ProfileInputModel
				{
					Degree = currentUser.Degree,
					FirstName = currentUser.FirstName,
					LastName = currentUser.LastName,
					Email = currentUser.Email,
					PhoneNumber = currentUser.PhoneNumber,
					Description = currentUser.Description
				};

			emailChangeInputModel = new EmailChangeInputModel
				{
					Email = currentUser.Email,
					NewEmail = string.Empty,
					Password = string.Empty
				};

			passwordChangeInputModel = new PasswordChangeInputModel
				{
					Password = string.Empty,
					NewPassword = string.Empty,
					ConfirmNewPassword = string.Empty
				};
		}
	}

	async Task UpdateProfile()
	{
		ProfileChangeDto profileChangeDto = new()
		{
			Email = currentUser.Email,
			Degree = formInputModel.Degree,
			FirstName = formInputModel.FirstName,
			LastName = formInputModel.LastName,
			PhoneNumber = formInputModel.PhoneNumber,
			Description = formInputModel.Description
		};

		var jsonContent = new StringContent(
				JsonSerializer.Serialize(profileChangeDto),
				Encoding.UTF8,
				"application/json");

		var httpClient = HttpClientFactory.CreateClient("API");
		var response = await httpClient.PutAsync("/updateUserProfile", jsonContent);
        var errorMessage = await response.Content.ReadAsStringAsync();
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Profil bol úspešne upravený!", Severity.Success);
		}
        else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Používateľ neexistuje.", Severity.Error);
        }
        else if (errorMessage == "Wrong format of phone number.")
        {
            Snackbar.Add("Používate zlý formát telefónneho čísla.", Severity.Error);
        }
        else if(errorMessage == "Wrong format of data."){
            Snackbar.Add("Používate zlý formát dát.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri aktualizácii profilu. Skúste to znova neskôr.", Severity.Error);
        }
	}

	async Task UpdateEmail()
	{
		if (string.Equals(emailChangeInputModel.Email, emailChangeInputModel.NewEmail))
		{
			Snackbar.Add("Nová emailová adresa je totožná.", Severity.Error);
			return;
		}

		EmailChangeDto emailChangeDto = new()
		{
			Email = emailChangeInputModel.Email,
			NewEmail = emailChangeInputModel.NewEmail,
			Password = emailChangeInputModel.Password,
		};

		var jsonContent = new StringContent(
				JsonSerializer.Serialize(emailChangeDto),
				Encoding.UTF8,
				"application/json");

		var httpClient = HttpClientFactory.CreateClient("API");
		var response = await httpClient.PatchAsync("updateEmail", jsonContent);
        var errorMessage = await response.Content.ReadAsStringAsync();
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Email bol úspešne zmenený!", Severity.Success);
		}
        else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Používateľ neexistuje.", Severity.Error);
        }
        else if (errorMessage == "New email is equal to actual email.")
        {
            Snackbar.Add("Nová emailová adresa je totožná.", Severity.Error);
        }
        else if (errorMessage == "Old email is not equal to actual email.")
        {
            Snackbar.Add("Email v políčku \"email\" sa nezhoduje s aktuálnym emailom.", Severity.Error);
        }
        else if (errorMessage == "Password is incorrect.")
        {
            Snackbar.Add("Nesprávne heslo.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri zmene emailu. Skúste to znova neskôr.", Severity.Error);
        }
	}

	async Task UpdatePassword()
	{
		if (!string.Equals(passwordChangeInputModel.NewPassword, passwordChangeInputModel.ConfirmNewPassword))
		{
			Snackbar.Add("Nové heslá sa nezhodujú.", Severity.Error);
			return;
		}

		if (string.Equals(passwordChangeInputModel.NewPassword, passwordChangeInputModel.Password))
		{
			Snackbar.Add("Nové heslo sa nemôže rovnať starému heslu.", Severity.Error);
			return;
		}
		PasswordChangeDto passwordDto = new()
		{
				Password = passwordChangeInputModel.Password,
				NewPassword = passwordChangeInputModel.NewPassword
		};

		var jsonContent = new StringContent(
				JsonSerializer.Serialize(passwordDto),
				Encoding.UTF8,
				"application/json");

		// var plainContent = new StringContent(passwordChangeInputModel.NewPassword.ToString(), Encoding.UTF8, "text/plain");


		var httpClient = HttpClientFactory.CreateClient("API");
		var response = await httpClient.PatchAsync("/updatePassword", jsonContent);
        var errorMessage = await response.Content.ReadAsStringAsync();
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Heslo bolo úspešne zmenené!", Severity.Success);
		}
        else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Používateľ neexistuje.", Severity.Error);
        }
        else if (errorMessage == "Password is incorrect.")
        {
            Snackbar.Add("Nesprávne heslo.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri zmene hesla. Skúste to znova neskôr.", Severity.Error);
        }
	}

	async Task UploadProfilePicture(IBrowserFile e)
	{
		//TODO: Upload profile picture via endpoint

		Snackbar.Add("Profilová fotka úspešne nahraná!", Severity.Success);
	}

	async Task DeleteProfilePicture()
	{
		//TODO: Delete profile picture via endpoint

		Snackbar.Add("Profilová fotka úspešne odstránená!", Severity.Success);
	}

	async Task RequestTeacherRole()
	{
		var client = HttpClientFactory.CreateClient("API");
		var response = await client.PatchAsync("/applyTeacher", new StringContent(string.Empty));
        var errorMessage = await response.Content.ReadAsStringAsync();
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Žiadosť o status učitela bola úspešne podaná!", Severity.Success);
		}
		else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Učiteľ neexistuje.", Severity.Error);
        }
        else if (errorMessage == "Only student can apply for teacher status.")
        {
            Snackbar.Add("Iba študent môže požiadať o učiteľský status.", Severity.Error);
        }
        else if (errorMessage == "Teaching request already exists.")
        {
            Snackbar.Add("Žiadosť už bola podaná.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri podaní žiadosťi. Skúste to znova neskôr.", Severity.Error);
        }
	}
}
