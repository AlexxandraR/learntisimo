@using System.Globalization;
@using System.Text.Json;
@using DTOs.Account;
@using System.Text
@using System.Net

@inject Radzen.DialogService DialogService
@inject NotificationService notificationService
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory

<div id="page-container" style="padding:3% 11% 0 11%;">
	<RadzenRow RowGap="0.75rem" Style="padding-left:8px">
		<RadzenDropDown @bind-SearchText=SubjectSearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
						Data=@meetingsList.Select(x => x.Course.Name).Distinct().ToList() AllowClear="true" @bind-Value=SelectSubject Style="width: 200px; max-width: 400px;"
						class="rz-shadow-5" Placeholder="Predmet" />

		<RadzenDatePicker @bind-Value=@SelectDate Name="RadzenDatePickerBindValue" ShowCalendarWeek AllowClear Placeholder="Dátum" DateFormat="dd.MM.yyyy" Culture='new CultureInfo("sk-SK")' class="rz-shadow-5" />
		<RadzenRow id="sort-buttons" Gap="10px" Style="margin-left:auto; margin-right:10px;">
			@if (!showHistory)
			{
				<MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.History" Color="MudBlazor.Color.Inherit" Style="width: 200px; background-color:white;" @onclick="ShowHistory">Zobraziť históriu</MudButton>
			}
			else
			{
				<MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.HistoryToggleOff" Color="MudBlazor.Color.Inherit" Style="width: 200px; background-color:white;" @onclick="ShowUpcoming">Skryť históriu</MudButton>
			}
		</RadzenRow>
	</RadzenRow>

	<RadzenDataList @ref="dataList" AllowVirtualization="false" Style="padding-top:0.65%;"
					WrapItems="true" AllowPaging="true" PagerAlwaysVisible="true" EmptyText="Zoznam je prázdny, skontrolujte zvolené filtre."
					Data="@filteredMeetingsList" TItem="MeetingDto" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left"
					ShowPagingSummary="true" PagingSummaryFormat="Strana {0} / {1}">
		<Template Context="meeting">
			<RadzenCard name="meeting-card" Variant="Radzen.Variant.Outlined" class="rz-p-4 rz-shadow-3 rz-border-radius-3" Style="width: 100%; overflow: hidden; background-color:white;">
				<RadzenRow name="main-row" Gap="0" AlignItems="Radzen.AlignItems.Center">
					<RadzenRow name="meeting-row" Style="flex:1;">
						<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Style="min-width: 300px">
							<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">@(meeting.Course.Name)</RadzenText>
						</RadzenRow>
						<RadzenRow name="meeting-details-row" JustifyContent="JustifyContent.Left" AlignItems="Radzen.AlignItems.Center" Gap="1rem" Style="flex:1;">
							<RadzenRow>
								<RadzenStack Style="min-width:115px">
									<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Dátum</RadzenText>
									<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@($"{meeting.Beginning.ToString("d", new CultureInfo("sk-SK"))}")</RadzenText>
								</RadzenStack>
								<RadzenStack Style="min-width:115px">
									<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Čas</RadzenText>
									<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@($"{meeting.Beginning.ToString("t", new CultureInfo("sk-SK"))}")</RadzenText>
								</RadzenStack>
							</RadzenRow>
							<RadzenRow>
								<RadzenStack Style="min-width:115px">
									<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Trvanie</RadzenText>
									<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@($"{meeting.Duration} minút")</RadzenText>
								</RadzenStack>
								<RadzenStack Style="min-width:115px">
									<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Miestnosť</RadzenText>
									<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@(meeting.Course.Room)</RadzenText>
								</RadzenStack>
							</RadzenRow>
							<RadzenRow>
								<RadzenStack Style="min-width:115px">
									<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Lektor</RadzenText>
									<RadzenLink href="javascript:void(0)" Style="font-size:1rem;" @onclick="async () => await OpenTeacherModal(meeting.Teacher)">@($"{meeting.Teacher.Degree} {meeting.Teacher.FirstName} {meeting.Teacher.LastName}")</RadzenLink>
								</RadzenStack>
							</RadzenRow>
						</RadzenRow>
					</RadzenRow>
					<RadzenRow name="action-row" AlignItems="Radzen.AlignItems.Center" Gap="1rem" Style="height:fit-content;">
						@if (!showHistory)
						{
							<MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="MudBlazor.Color.Error" Style="width: 175px; border-radius:25px;" @onclick="async () => await RemoveMeeting(meeting)">Zrušiť termín</MudButton>
						}
					</RadzenRow>
				</RadzenRow>
			</RadzenCard>
		</Template>
	</RadzenDataList>
</div>

@code {
	RadzenDataList<MeetingDto> dataList;
	List<MeetingDto> meetingsList = new List<MeetingDto>();
	List<MeetingDto> filteredMeetingsList = new List<MeetingDto>();

	bool showHistory = false;
	DateTime? selectedDate;
	string? selectedSubject;

	public DateTime? SelectDate
	{
		get
		{
			return selectedDate;
		}
		set
		{
			if (selectedDate == value)
			{
				return;
			}

			selectedDate = value;

			ApplyFilters();
		}
	}

	public string? SelectSubject
	{
		get
		{
			return selectedSubject;
		}
		set
		{
			if (selectedSubject == value)
			{
				return;
			}

			selectedSubject = value;

			ApplyFilters();
		}
	}

	string subjectSearchText = "";

	public string SubjectSearchText
	{
		get
		{
			return subjectSearchText;
		}
		set
		{
			if (subjectSearchText != value)
			{
				subjectSearchText = value;
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var httpClient = HttpClientFactory.CreateClient("API");
		var meetingsResponse = await httpClient.GetAsync("studentMeetings");
		List<MeetingDto> allMeetings = new();
        var errorMessage = await meetingsResponse.Content.ReadAsStringAsync();
		if (meetingsResponse.IsSuccessStatusCode)
		{
			var meetingsJson = await meetingsResponse.Content.ReadAsStringAsync();

			allMeetings = JsonSerializer.Deserialize<List<MeetingDto>>(meetingsJson);
		}
		else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Študent neexistuje.", Severity.Error);
        }
        else if (errorMessage == "Only student can use this endpoint: /studentMeetings.")
        {
            Snackbar.Add("Iba študent môže pristupovať na tento endpoint: /studentMeetings.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri zobrazení vašich termínov. Skúste to znova neskôr.", Severity.Error);
                }

		meetingsList = allMeetings;

		filteredMeetingsList = meetingsList
			.Where(x => x.Beginning.Date > DateTime.Now.Date)
			.ToList(); ;
	}

	void ApplyFilters()
	{
		filteredMeetingsList = meetingsList.ToList();

		if (!string.IsNullOrWhiteSpace(selectedSubject))
		{
			filteredMeetingsList = filteredMeetingsList
				.Where(x => string.Equals(x.Course.Name, selectedSubject, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		if (selectedDate != null)
		{
			filteredMeetingsList = filteredMeetingsList
				.Where(x => x.Beginning.Date == selectedDate.Value.Date)
				.ToList();
		}

		if (string.IsNullOrWhiteSpace(selectedSubject) && selectedDate == null)
		{
			filteredMeetingsList = meetingsList;
		}

		if (showHistory)
		{
			filteredMeetingsList = filteredMeetingsList
				.Where(x => x.Beginning.Date < DateTime.Now.Date)
				.ToList();
		}
		else
		{
			filteredMeetingsList = filteredMeetingsList
				.Where(x => x.Beginning.Date > DateTime.Now.Date)
				.ToList();
		}
	}

	async Task RemoveMeeting(MeetingDto meeting)
	{
		var httpClient = HttpClientFactory.CreateClient("API");
        var response = await httpClient.DeleteAsync($"removeStudentMeeting/{meeting.Id}");
        var errorMessage = await response.Content.ReadAsStringAsync();
		if (response.IsSuccessStatusCode)
		{
			meetingsList.Remove(meeting);
			filteredMeetingsList.Remove(meeting);
			Snackbar.Add("Termín bol úspešne zrušený.", Severity.Success);
			await dataList.Reload();
		}
		else if (errorMessage == "Meeting does not exist.")
        {
            Snackbar.Add("Termín neexistuje.", Severity.Error);
        }
        else if (errorMessage == "User does not exist.")
        {
            Snackbar.Add("Študent neexistuje.", Severity.Error);
        }
        else if (errorMessage == "User was not assigned to this meeting.")
        {
            Snackbar.Add("Už nie ste do daného termínu zapísaný.", Severity.Error);
        }
        else if(errorMessage == "Only student can be removed from a meeting.")
        {
            Snackbar.Add("Iba študent sa môže odpísať z termínu.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Nastala chyba pri odpísaní z termínu. Skúste to znova neskôr.", Severity.Error);
        }
	}


	async Task OpenTeacherModal(UserDto teacher)
	{
		var options = new Radzen.DialogOptions()
			{
				Resizable = false,
				Draggable = false,
				CloseDialogOnOverlayClick = true,
				Width = "fit-content",
				Height = "fit-content",
			};

		var parameters = new Dictionary<string, object>
		{
			{ "Teacher", teacher }
		};

		await DialogService.OpenAsync<TeacherInfoModal>("Informácie o lektorovi", parameters, options);
	}

	void ShowHistory()
	{
		showHistory = true;

		ApplyFilters();
	}

	void ShowUpcoming()
	{
		showHistory = false;

		ApplyFilters();
	}

	async Task<UserDto?> getcurrentUser(HttpClient httpClient)
	{
		var userResponse = await httpClient.GetAsync("user");

		UserDto? currentUser = new();

		if (userResponse.IsSuccessStatusCode)
		{
			var userJson = await userResponse.Content.ReadAsStringAsync();
			currentUser = JsonSerializer.Deserialize<UserDto>(userJson);
		}

		return currentUser;
	}
}
