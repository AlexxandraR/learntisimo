@page "/requests"

@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using System.Text

@attribute [Authorize(Policy = "AdminOnly")]

@inject Radzen.DialogService DialogService
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Doučovania</PageTitle>

<style>
	.rz-datalist-content .rz-card {
		background: white;
		min-height: 100px;
		padding-top: 12px !important;
	}

	.rz-badge {
		text-transform: none;
		padding: 5px;
	}

	.rz-pager-summary {
		padding: 5px !important;
		background-color: white;
		border-radius: 5px;
		color: #424242;
		font-weight: 500;
		box-shadow: var(--rz-shadow-5);
	}

	.rz-pager-element {
		box-shadow: var(--rz-shadow-5);
	}

	.rz-pager-element:not(.rz-state-disabled):not(.rz-state-active) {
		background-color: white;
	}

	.rz-datalist-content .mud-button {
		border-radius: 30px;
	}

	@@media only screen and (max-width: 1475px) {
		div[name="request-row"] {
			flex-direction: column;
		}

		div[name="request-details-row"] {
			justify-content: center !important;
		}
	}

	@@media only screen and (max-width: 1105px) {
		div[name="main-row"] {
			flex-direction: column;
		}
	}

	@@media only screen and (max-width: 990px) {
		#sort-buttons {
			margin: 0px 8px 0px 0px !important;
		}
	}

	@@media only screen and (max-width: 605px) {
		div[name="request-details-row"] {
			flex-direction: column;
			align-items: start !important;
		}
	}

	@@media only screen and (max-width: 375px) {
		div[name="action-row"] {
			flex-direction: column;
			align-items: center !important;
		}

		div[name="request-row"] {
			width: 100%;
		}

		div[name="request-row"] > div:nth-child(1) {
			min-width: unset !important;
		}
	}
</style>

<div id="page-container" style="padding:3% 11% 0 11%;">
	<RadzenRow RowGap="0.75rem" Style="padding-left:8px">
		<RadzenDropDown @bind-SearchText=TeacherSearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
						Data=@requestsList.Select(x => x.User.FirstName + " " + x.User.LastName).Distinct().ToList() AllowClear="true" @bind-Value=SelectTeacher Style="width: 200px; max-width: 400px;"
						class="rz-shadow-5" Placeholder="Používateľ" />
		<RadzenDropDown Data=@statuses AllowClear="true" @bind-Value=SelectStatus Style="width: 200px; max-width: 400px;" class="rz-shadow-5" Placeholder="Status" />
		<RadzenDropDown Data=@sortOrders AllowClear="true" @bind-Value=SelectSortOrder Style="width: 200px; max-width: 400px;" class="rz-shadow-5" Placeholder="Zoradiť podľa času" />
	</RadzenRow>
	<RadzenDataList AllowVirtualization="false" Style="padding-top:0.65%;"
					WrapItems="true" AllowPaging="true" PagerAlwaysVisible="true" EmptyText="Zoznam je prázdny, skontrolujte zvolené filtre."
					Data="@filteredRequestsList" TItem="RequestDto" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left"
					ShowPagingSummary="true" PagingSummaryFormat="Strana {0} / {1}">
		<Template Context="request">
			<RadzenCard name="request-card" Variant="Radzen.Variant.Outlined" class="rz-p-4 rz-shadow-3 rz-border-radius-3" Style="width: 100%; overflow: hidden;">
				<RadzenRow name="main-row" Gap="0" AlignItems="Radzen.AlignItems.Center">
					<RadzenRow name="request-row" Style="flex:1;">
						<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Style="min-width: 300px">
							<RadzenLink href="javascript:void(0)" Style="font-size:1.2rem;" @onclick="async () => await OpenUserModal(request.User)">@($"{request.User.Degree} {request.User.FirstName} {request.User.LastName}")</RadzenLink>
						</RadzenRow>
						<RadzenRow name="request-details-row" JustifyContent="JustifyContent.Left" AlignItems="Radzen.AlignItems.Center" Gap="1rem" Style="flex:1;">
							<RadzenStack Style="min-width:85px">
								<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">ID</RadzenText>
								<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@(request.Id)</RadzenText>
							</RadzenStack>
							<RadzenStack Style="min-width:150px">
								<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Dátum a čas</RadzenText>
								<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@(request.RequestedAt)</RadzenText>
							</RadzenStack>
							<RadzenStack Style="min-width:225px">
								<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Email</RadzenText>
								<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@(request.User.Email)</RadzenText>
							</RadzenStack>
							<RadzenStack Style="min-width:225px">
								<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Status</RadzenText>
								<RadzenText TextStyle="TextStyle.Body2" Style="font-size:1.1rem;">@(request.Status)</RadzenText>
							</RadzenStack>
						</RadzenRow>
					</RadzenRow>
					<RadzenRow name="action-row" AlignItems="Radzen.AlignItems.Center" Gap="0.75rem" Style="height:fit-content;">
						<MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.CheckCircle" Color="MudBlazor.Color.Success" Style="width: 145px;" @onclick="async () => await AcceptRequest(request)">Schváliť</MudButton>
						<MudButton Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="MudBlazor.Color.Error" Style="width: 145px;" @onclick="async () => await DenyRequest(request)">Zamietnuť</MudButton>
					</RadzenRow>
				</RadzenRow>
			</RadzenCard>
		</Template>
	</RadzenDataList>
</div>

@code {
	List<RequestDto> requestsList = new List<RequestDto>();
	List<RequestDto> filteredRequestsList = new List<RequestDto>();
	List<string> statuses = new List<string> { "PENDING", "APPROVED", "REJECTED" };
	List<string> sortOrders = new List<string> { "Newest to Oldest", "Oldest to Newest" };

	string? selectedTeacher;
	string? selectedStatus;
	string? selectedSortOrder;

	public string? SelectTeacher
	{
		get
		{
			return selectedTeacher;
		}
		set
		{
			if (selectedTeacher == value)
			{
				return;
			}

			selectedTeacher = value;

			ApplyFilters();
		}
	}

	public string? SelectStatus
	{
		get
		{
			return selectedStatus;
		}
		set
		{
			if (selectedStatus == value)
			{
				return;
			}

			selectedStatus = value;

			ApplyFilters();
		}
	}

	public string? SelectSortOrder
	{
		get
		{
			return selectedSortOrder;
		}
		set
		{
			if (selectedSortOrder == value)
			{
				return;
			}

			selectedSortOrder = value;

			ApplyFilters();
		}
	}

	string teacherSearchText = "";

	public string TeacherSearchText
	{
		get
		{
			return teacherSearchText;
		}
		set
		{
			if (teacherSearchText != value)
			{
				teacherSearchText = value;
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		// TODO: Fetch data from ENDPOINT

		var httpClient = HttpClientFactory.CreateClient("API");
		var response = await httpClient.GetAsync("/getTeachingRequests");
		List<RequestDto> parsedRequestList = new();

		if (response.IsSuccessStatusCode)
		{
			var jsonStringData = await response.Content.ReadAsStringAsync();
			parsedRequestList = JsonSerializer.Deserialize<List<RequestDto>>(jsonStringData);		
		}

		requestsList = parsedRequestList;
		filteredRequestsList = requestsList;
	}

	void ApplyFilters()
	{
		filteredRequestsList = requestsList.ToList();

		if (!string.IsNullOrWhiteSpace(selectedTeacher))
		{
			var nameParts = selectedTeacher.Split(' ');

			if (nameParts.Length == 2)
			{
				string name = nameParts[0];
				string lastName = nameParts[1];

				filteredRequestsList = filteredRequestsList
					.Where(x => string.Equals(x.User.FirstName, name, StringComparison.OrdinalIgnoreCase) &&
								string.Equals(x.User.LastName, lastName, StringComparison.OrdinalIgnoreCase))
					.ToList();
			}
		}

		if (!string.IsNullOrWhiteSpace(selectedStatus))
		{
			filteredRequestsList = filteredRequestsList
				.Where(x => string.Equals(x.Status, selectedStatus, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		if (!string.IsNullOrWhiteSpace(selectedSortOrder))
		{
			if (selectedSortOrder == "Newest to Oldest")
			{
				filteredRequestsList = filteredRequestsList
					.OrderByDescending(x => x.RequestedAt)
					.ToList();
			}
			else if (selectedSortOrder == "Oldest to Newest")
			{
				filteredRequestsList = filteredRequestsList
					.OrderBy(x => x.RequestedAt)
					.ToList();
			}
		}

		if (string.IsNullOrWhiteSpace(selectedTeacher) 
		&& string.IsNullOrWhiteSpace(selectedStatus) 
		&& string.IsNullOrWhiteSpace(selectedSortOrder))
		{
			filteredRequestsList = requestsList;
		}
	}

	async Task OpenUserModal(UserDto user)
	{
		var options = new Radzen.DialogOptions()
			{
				Resizable = false,
				Draggable = false,
				CloseDialogOnOverlayClick = true,
				Width = "fit-content",
				Height = "600px",
			};

		var parameters = new Dictionary<string, object>
		{
			{ "Teacher", user }
		};

		await DialogService.OpenAsync<TeacherInfoModal>("Informácie o uchádzačovi", parameters, options);
	}

	async Task AcceptRequest(RequestDto request)
	{
		//TODO: Elevate privilege to be a teacher
		var jsonContent = new StringContent(
				JsonSerializer.Serialize(request.User),
				Encoding.UTF8,
				"application/json");

		var httpClient = HttpClientFactory.CreateClient("API");
		var response = await httpClient.PatchAsync($"/acceptRequest/{request.Id}", jsonContent);

		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Žiadosť bola schválená.", Severity.Success);
			var requestToUpdate = requestsList.FirstOrDefault(r => r.Id == request.Id);
			if (requestToUpdate != null)
			{
				requestToUpdate.Status = "APPROVED";
			}
			ApplyFilters();
		}
		else
		{
			
			Snackbar.Add("Akcia nebola spracovaná.", Severity.Error);
		}



	}

	async Task DenyRequest(RequestDto request)
	{
		//TODO: Deny request to be a teacher
		var jsonContent = new StringContent(
				JsonSerializer.Serialize(request.User),
				Encoding.UTF8,
				"application/json");

		var httpClient = HttpClientFactory.CreateClient("API");
		var response = await httpClient.PatchAsync($"/denyRequest/{request.Id}", jsonContent);

		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Žiadosť bola zamietnutá.", Severity.Success);
			var requestToUpdate = requestsList.FirstOrDefault(r => r.Id == request.Id);
			if (requestToUpdate != null)
			{
				requestToUpdate.Status = "REJECTED";
			}
			ApplyFilters();
		}
		else
		{
			Snackbar.Add("Akcia nebola spracovaná.", Severity.Error);
		}


		
	}
}
